-- RL's
-- Based on Fowler's UML Distilled chapter 3 example

model CustomerOrders

class Customer
  attributes
    name : String init : 'Jeff Bezos'
  operations
    getCreditRating() : String = 'poor'
end

class CorporateCustomer < Customer
  attributes
    contactName : String
	creditRating : String
	creditLimit : Integer
  operations
    getCreditRating() : String
    begin
        result:= self.creditRating
    end 
    
end

class PersonalCustomer < Customer
  attributes
    creditCarNum : String
  operations
    
end


class Order
  attributes
    isPrepaid : Boolean init : false
    number : String
    price : Real  init : 0
  operations
    addLineItem( quantity : Integer, p : Product)
    begin
        declare lineItem : OrderLine;  --declare lineItem object variable
        lineItem := new OrderLine;  --creates lineItem object
        insert(self,lineItem) into Contains;  --creates relationship between order object and lineItem object          
        
        lineItem.processOrderLine(quantity, p)                    
    end
    
	calculatePrice() : Real
    begin
        declare line:OrderLine, linePrice: Real;
        
        self.price := 0;
        for line in self.lineItems do  --loop through each line in order (note: this line gets the "lineItems" keyword from the "contains" association)
            linePrice := line.getPrice();
            self.price := self.price + linePrice;    --add the line price to the total order price    
        end;

        result:= self.price   --returns the order price               
    end
    
    calculateBasePrice(q : Integer, unitPrice : Real) : Real
    begin        
        if q >= 3 then
                result := q * unitPrice * 0.9   -- 10% off
            else
                result := q * unitPrice
        end        
    end
    
end
                                                              
class OrderLine
  attributes
    price : Real  init : 0
    quantity : Integer
  operations
    getPrice() : Real
    begin
        declare productPrice:Real;
        productPrice := self.lineProduct.getUnitPrice();

        if self.quantity >= 3 then
            result :=  productPrice * self.quantity * 0.9;  --10% off
        else
            result := productPrice * self.quantity
        end
    end

    processOrderLine(q: Integer, p: Product)
    begin
      self.quantity := q;  --sets quantity of line item to the quantity specified by operation parameters
      p.updateStock(q);  --reduces the stockLevel attribute of the product object by the quantity
      insert (self, p) into HasProduct   --creates relationship between lineItem and product               
    end

    
end

class Product
  attributes
    name : String
	price : Real
    stockLevel : Integer init : 8
    
  operations
    getUnitPrice() : Real
    begin
        result := self.price
    end
    
    updateStock(q : Integer)
    begin
        self.stockLevel := self.stockLevel - q
    end
end

association Contains between   --association between the order and each line in the order
  Order[1] 
  OrderLine[1..*] role lineItems
end

association HasProduct between  --association between a line and the product on it
  OrderLine[*] role orderLines
  Product[1] role lineProduct
end

association HasOrdered between  --association between a customer and their orders
  Customer[1]
  Order[*] role orders
end


-- constraints

constraints

context Order :: addLineItem( quantity : Integer, p : Product)
  pre: 
    if self.getCreditRating() == "poor" then
      self.isPrepaid = true;
    endif
  